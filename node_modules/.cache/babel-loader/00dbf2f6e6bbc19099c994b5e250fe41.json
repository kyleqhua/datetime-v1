{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React, { PropTypes } from 'react';\nimport ReactDOM from 'react-dom';\nimport moment from 'moment';\nimport dstyles from './dstyle.css';\nexport var DayCircle =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DayCircle, _React$Component);\n\n  function DayCircle() {\n    _classCallCheck(this, DayCircle);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DayCircle).apply(this, arguments));\n  }\n\n  _createClass(DayCircle, [{\n    key: \"makeClassNames\",\n    value: function makeClassNames() {\n      if (this.props.unavailable) {\n        return this.props.renderClassNames('dayCircleUnavailable', 'rwdp-DayCircle rwdp-DayCircle-unavailable rwdp-flex-box rwdp-flex-column rwdp-justify-content-center rwdp-align-items-center');\n      } else if (this.props.selected) {\n        return this.props.renderClassNames('dayCicleSelected', 'rwdp-DayCircle rwdp-DayCircle-selected rwdp-flex-box rwdp-flex-column rwdp-justify-content-center rwdp-align-items-center');\n      } else {\n        return this.props.renderClassNames('dayCicle', 'rwdp-DayCircle rwdp-flex-box rwdp-flex-column rwdp-justify-content-center rwdp-align-items-center');\n      }\n    }\n  }, {\n    key: \"renderToday\",\n    value: function renderToday() {\n      if (moment().isSame(this.props.day, 'day')) {\n        return React.createElement(\"div\", {\n          className: this.props.renderClassNames('dayCircleTodayText', 'rwdp-DayCircle-today')\n        }, this.props.todayText || '- TODAY -');\n      }\n    }\n  }, {\n    key: \"renderUnavailable\",\n    value: function renderUnavailable() {\n      if (this.props.unavailable) {\n        return React.createElement(\"div\", {\n          className: this.props.renderClassNames('dayCircleUnavailableText', 'rwdp-DayCircle-unavailable-text')\n        }, this.props.unavailableText || 'unavailable');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          firstLineFormat = _this$props.firstLineFormat,\n          secondLineFormat = _this$props.secondLineFormat,\n          firstLineMobileFormat = _this$props.firstLineMobileFormat,\n          secondLineMobileFormat = _this$props.secondLineMobileFormat;\n      var name = this.props.mobilView ? this.props.day.format(firstLineMobileFormat || 'dddd') : this.props.day.format(firstLineFormat || 'ddd');\n      var date = this.props.mobilView ? this.props.day.format(secondLineMobileFormat || 'MMMM D, Y') : this.props.day.format(secondLineFormat || 'MMM D');\n      return React.createElement(\"button\", {\n        disabled: this.props.unavailable,\n        onClick: function onClick() {\n          return _this.props.click(_this.props.day);\n        },\n        className: this.props.renderClassNames('dayCircleContainer', this.props.mobilView ? \"rwdp-DayCircle-container\" : \"rwdp-DayCircle-container rwdp-flex-box rwdp-flex-column rwdp-justify-content-center rwdp-align-items-center\")\n      }, React.createElement(\"div\", {\n        className: this.makeClassNames()\n      }, React.createElement(\"strong\", null, name), React.createElement(\"div\", null, date), this.renderToday(), this.renderUnavailable()));\n    }\n  }]);\n\n  return DayCircle;\n}(React.Component);\n\nvar ReactWeeklyDayPicker =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(ReactWeeklyDayPicker, _React$Component2);\n\n  function ReactWeeklyDayPicker(props) {\n    var _this2;\n\n    _classCallCheck(this, ReactWeeklyDayPicker);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ReactWeeklyDayPicker).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this2), \"daySelect\", function (day) {\n      if (_this2.state.multipleDaySelect) {\n        var newArray = _this2.state.selectedDays;\n        var deleting = false;\n\n        _this2.state.selectedDays.forEach(function (d, i) {\n          if (day.isSame(d, 'day')) {\n            newArray.splice(i, 1);\n            deleting = true;\n          }\n        });\n\n        if (!deleting) {\n          _this2.setState({\n            selectedDays: [].concat(_toConsumableArray(_this2.state.selectedDays), [day])\n          });\n\n          _this2.convertOutput([].concat(_toConsumableArray(_this2.state.selectedDays), [day]));\n        } else {\n          //remove existed day\n          _this2.convertOutputUnselect(day);\n\n          _this2.setState({\n            selectedDays: newArray\n          });\n\n          _this2.convertOutput(newArray);\n        }\n      } else {\n        if (day.isSame(_this2.state.selectedDays[0], 'day')) {\n          //remove existed day\n          _this2.convertOutputUnselect(day);\n\n          if (_this2.props.unselectable) {\n            _this2.setState({\n              selectedDays: []\n            });\n\n            _this2.convertOutput([]);\n          }\n        } else {\n          _this2.setState({\n            selectedDays: [day]\n          });\n\n          _this2.convertOutput([day]);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"prevWeek\", function () {\n      _this2.setState({\n        startDay: _this2.state.startDay.clone().add(-_this2.state.daysCount, 'days')\n      }, function () {\n        if (_this2.props.onPrevClick) {\n          _this2.props.onPrevClick(_this2.state.startDay, _this2.state.selectedDays);\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"nextWeek\", function () {\n      _this2.setState({\n        startDay: _this2.state.startDay.clone().add(_this2.state.daysCount, 'days')\n      }, function () {\n        if (_this2.props.onNextClick) {\n          _this2.props.onNextClick(_this2.state.startDay, _this2.state.selectedDays);\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"renderClassNames\", function (type, name) {\n      if (_this2.props.classNames) {\n        if (_this2.props.classNames[type]) {\n          return _this2.props.classNames[type];\n        }\n      }\n\n      return name;\n    });\n\n    var selectedDays = _this2.props.selectedDays || [];\n    var convertedSelectedDays = selectedDays.map(function (day) {\n      if (moment.isMoment(day)) {\n        return day;\n      } else {\n        return moment(day);\n      }\n    });\n    var convertedStartDay;\n\n    if (_this2.props.startDay) {\n      if (moment.isMoment(_this2.props.startDay)) {\n        convertedStartDay = _this2.props.startDay;\n      } else {\n        convertedStartDay = moment(_this2.props.startDay);\n      }\n    } else {\n      convertedStartDay = moment();\n    }\n\n    _this2.state = {\n      daysCount: _this2.props.daysCount || 7,\n      selectedDays: convertedSelectedDays,\n      startDay: convertedStartDay,\n      multipleDaySelect: _this2.props.multipleDaySelect != undefined ? _this2.props.multipleDaySelect : true,\n      format: _this2.props.format != undefined ? _this2.props.format : null,\n      unavailables: _this2.props.unavailables != undefined ? _this2.props.unavailables : false,\n      mobilView: _this2.props.mobilView != undefined ? _this2.props.mobilView : false,\n      hiddens: _this2.props.hiddens != undefined ? _this2.props.hiddens : false,\n      beforeToday: _this2.props.beforeToday != undefined ? _this2.props.beforeToday : false\n    };\n    return _this2;\n  }\n\n  _createClass(ReactWeeklyDayPicker, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var selectedDays = nextProps.selectedDays || [];\n      var convertedSelectedDays = selectedDays.map(function (day) {\n        if (moment.isMoment(day)) {\n          return day;\n        } else {\n          return moment(day);\n        }\n      });\n      var convertedStartDay;\n\n      if (nextProps.startDay) {\n        if (moment.isMoment(nextProps.startDay)) {\n          convertedStartDay = nextProps.startDay;\n        } else {\n          convertedStartDay = moment(nextProps.startDay);\n        }\n      } else {\n        convertedStartDay = this.state.startDay;\n      }\n\n      this.setState({\n        selectedDays: convertedSelectedDays,\n        startDay: convertedStartDay,\n        daysCount: nextProps.daysCount || 7,\n        multipleDaySelect: nextProps != undefined ? nextProps.multipleDaySelect : true,\n        format: nextProps.format != undefined ? nextProps.format : null,\n        unavailables: nextProps.unavailables != undefined ? nextProps.unavailables : false,\n        mobilView: nextProps.mobilView != undefined ? nextProps.mobilView : false,\n        hiddens: nextProps.hiddens != undefined ? nextProps.hiddens : false,\n        beforeToday: nextProps.beforeToday != undefined ? nextProps.beforeToday : false\n      });\n    }\n  }, {\n    key: \"convertOutput\",\n    value: function convertOutput(dayArray) {\n      var _this3 = this;\n\n      var output = dayArray.map(function (d) {\n        return d.clone().format(_this3.state.format);\n      });\n\n      if (this.props.selectDay) {\n        this.props.selectDay(output);\n      }\n    }\n  }, {\n    key: \"convertOutputUnselect\",\n    value: function convertOutputUnselect(day) {\n      var output = day.clone().format(this.state.format);\n\n      if (this.props.unselectDay) {\n        this.props.unselectDay(output);\n      }\n    }\n  }, {\n    key: \"checkSelectedDay\",\n    value: function checkSelectedDay(day) {\n      var selected = false;\n\n      if (this.state.selectedDays.length > 0) {\n        this.state.selectedDays.forEach(function (d, i) {\n          if (day.isSame(d, 'day')) {\n            selected = true;\n          }\n        });\n      }\n\n      return selected;\n    }\n  }, {\n    key: \"checkUnavailables\",\n    value: function checkUnavailables(day) {\n      var unavailable = false;\n\n      if (this.state.unavailables) {\n        if (this.state.unavailables.weekly) {\n          this.state.unavailables.weekly.forEach(function (d, i) {\n            if (day.weekday() === d) {\n              unavailable = true;\n            }\n          });\n        }\n\n        if (this.state.unavailables.dates) {\n          this.state.unavailables.dates.forEach(function (d, i) {\n            if (day.isSame(moment(d), 'day')) {\n              unavailable = true;\n            }\n          });\n        }\n\n        if (this.state.unavailables.relative) {\n          this.state.unavailables.relative.forEach(function (r, i) {\n            if (day.isSame(moment().clone().add(r, 'days'), 'day')) {\n              unavailable = true;\n            }\n          });\n        }\n      }\n\n      if (!this.state.beforeToday) {\n        if (day.isBefore(moment(), 'day')) {\n          unavailable = true;\n        }\n      }\n\n      return unavailable;\n    }\n  }, {\n    key: \"checkHiddenDay\",\n    value: function checkHiddenDay(day) {\n      var hidden = false;\n\n      if (this.state.hiddens) {\n        if (this.state.hiddens.weekly) {\n          this.state.hiddens.weekly.forEach(function (d, i) {\n            if (day.weekday() === d) {\n              hidden = true;\n            }\n          });\n        }\n\n        if (this.state.hiddens.dates) {\n          this.state.hiddens.dates.forEach(function (d, i) {\n            if (day.isSame(moment(d), 'day')) {\n              hidden = true;\n            }\n          });\n        }\n\n        if (this.state.hiddens.relative) {\n          this.state.hiddens.relative.forEach(function (r, i) {\n            if (day.isSame(moment().clone().add(r, 'days'), 'day')) {\n              hidden = true;\n            }\n          });\n        }\n      }\n\n      return hidden;\n    }\n  }, {\n    key: \"renderDesktopView\",\n    value: function renderDesktopView(weekdays) {\n      var _this4 = this;\n\n      var dayComps = weekdays.map(function (day, i) {\n        return React.createElement(DayCircle, _extends({}, _this4.props, {\n          renderClassNames: _this4.renderClassNames,\n          todayText: _this4.props.todayText,\n          unavailableText: _this4.props.unavailableText,\n          day: day,\n          key: i,\n          click: _this4.daySelect,\n          selected: _this4.checkSelectedDay(day),\n          unavailable: _this4.checkUnavailables(day)\n        }));\n      });\n      return React.createElement(\"div\", {\n        className: this.renderClassNames('dayBox', 'rwdpDayBoxDesktop rwdp-flex-box rwdp-flex-row rwdp-justify-content-space-between')\n      }, dayComps);\n    }\n  }, {\n    key: \"renderMobilView\",\n    value: function renderMobilView(weekdays) {\n      var _this5 = this;\n\n      var dayComps = weekdays.map(function (day, i) {\n        return React.createElement(DayCircle, _extends({}, _this5.props, {\n          renderClassNames: _this5.renderClassNames,\n          todayText: _this5.props.todayText,\n          unavailableText: _this5.props.unavailableText,\n          day: day,\n          key: i,\n          click: _this5.daySelect,\n          selected: _this5.checkSelectedDay(day),\n          unavailable: _this5.checkUnavailables(day),\n          mobilView: true\n        }));\n      });\n      return React.createElement(\"div\", {\n        className: this.renderClassNames('dayBox', 'rwdpDayBoxMobil rwdp-flex-box rwdp-flex-column rwdp-justify-content-space-between')\n      }, dayComps);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var startDay = this.state.startDay;\n      var weekdays = [];\n\n      for (var index = 0; weekdays.length < this.state.daysCount; index++) {\n        var day = startDay.clone().add(index, 'days');\n\n        if (!this.checkHiddenDay(day)) {\n          weekdays.push(day);\n        }\n      }\n\n      var days = null;\n\n      if (this.state.mobilView) {\n        days = this.renderMobilView(weekdays);\n      } else {\n        days = this.renderDesktopView(weekdays);\n      }\n\n      return React.createElement(\"div\", {\n        className: this.renderClassNames('container', 'rwdpDayPickerContainer')\n      }, React.createElement(\"div\", {\n        onClick: this.prevWeek,\n        className: this.renderClassNames('prevWeekArrow', 'rwdpPrevWeekArrow')\n      }), React.createElement(\"div\", {\n        onClick: this.nextWeek,\n        className: this.renderClassNames('nextWeekArrow', 'rwdpNextWeekArrow')\n      }), days);\n    }\n  }]);\n\n  return ReactWeeklyDayPicker;\n}(React.Component);\n\nexport default ReactWeeklyDayPicker;","map":null,"metadata":{},"sourceType":"module"}